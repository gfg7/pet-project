/*
 * API MVP Карты
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Map.Contract.Attributes;
using Map.Contract.Models;

namespace Map.Contract.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class HubApiController : ControllerBase
    { 
        /// <summary>
        /// Feature Удалить заметку
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="noteId"></param>
        /// <response code="200">Заметка удалена</response>
        /// <response code="404">Заметка не найдена</response>
        [HttpDelete]
        [Route("/location/note")]
        [ValidateModelState]
        [SwaggerOperation("LocationNoteDelete")]
        public abstract Task<IActionResult> LocationNoteDelete([FromQuery (Name = "noteId")][Required()]string noteId);

        /// <summary>
        /// Feature Заметка на карте (получение всех заметок карты в ближайшем диапазоне)
        /// </summary>
        /// <remarks>consumed event</remarks>
        /// <param name="radius">Радиус поиска в метрах</param>
        /// <response code="200">Массив заметок в ближайшем диапазоне</response>
        [HttpGet]
        [Route("/location/note")]
        [ValidateModelState]
        [SwaggerOperation("LocationNoteGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MapNote>), description: "Массив заметок в ближайшем диапазоне")]
        public abstract Task<IActionResult> LocationNoteGet([FromQuery (Name = "radius")][Required()]int radius);

        /// <summary>
        /// Feature Заметка на карте (оставить заметку)
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="mapNoteRequest"></param>
        /// <response code="201">Заметка сохранена</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        [HttpPost]
        [Route("/location/note")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationNotePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(MapNote), description: "Заметка сохранена")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        public abstract Task<IActionResult> LocationNotePost([FromBody]MapNoteRequest mapNoteRequest);

        /// <summary>
        /// Modal Отредактировать заметку
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="noteId"></param>
        /// <param name="mapNoteRequest"></param>
        /// <response code="200">Заметка обновлена</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        /// <response code="404">Заметка не найдена</response>
        /// <response code="409">Ошибка сохранения заметки</response>
        [HttpPut]
        [Route("/location/note")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationNotePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(MapNote), description: "Заметка обновлена")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка сохранения заметки")]
        public abstract Task<IActionResult> LocationNotePut([FromQuery (Name = "noteId")][Required()]string noteId, [FromBody]MapNoteRequest mapNoteRequest);

        /// <summary>
        /// MVP Геймификация Feature Трекер маршрутов
        /// </summary>
        /// <remarks>Текущее местоположение во время прогулки (income event)</remarks>
        /// <param name="locationRequest"></param>
        /// <response code="201">Текущие координаты сохранены</response>
        /// <response code="409">Ошибка сохранения</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        [HttpPost]
        [Route("/location")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Location), description: "Текущие координаты сохранены")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка сохранения")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        public abstract Task<IActionResult> LocationPost([FromBody]LocationRequest locationRequest);

        /// <summary>
        /// Feature Статус показа местоположения
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="body"></param>
        /// <response code="200">Успешно изменен статус показа</response>
        /// <response code="409">Ошибка изменения статуса показа</response>
        [HttpPut]
        [Route("/location")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserLocation), description: "Успешно изменен статус показа")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка изменения статуса показа")]
        public abstract Task<IActionResult> LocationPut([FromBody]bool? body);

        /// <summary>
        /// Modal Радар
        /// </summary>
        /// <remarks>consumed event</remarks>
        /// <response code="200">Массив пользователей рядом</response>
        [HttpGet]
        [Route("/location/radar")]
        [ValidateModelState]
        [SwaggerOperation("LocationRadarGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserLocation>), description: "Массив пользователей рядом")]
        public abstract Task<IActionResult> LocationRadarGet();
    }
}
