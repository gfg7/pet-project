/*
 * API MVP Карты
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Map.Contract.Converters;

namespace Map.Contract.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Location : IEquatable<Location>
    {
        /// <summary>
        /// Gets or Sets PointId
        /// </summary>
        [DataMember(Name="pointId", EmitDefaultValue=false)]
        public string PointId { get; set; }

        /// <summary>
        /// Gets or Sets Longtitude
        /// </summary>
        [Required]
        [DataMember(Name="longtitude", EmitDefaultValue=true)]
        public decimal Longtitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [Required]
        [DataMember(Name="latitude", EmitDefaultValue=true)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name="course", EmitDefaultValue=true)]
        public decimal? Course { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="speed", EmitDefaultValue=true)]
        public decimal? Speed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  PointId: ").Append(PointId).Append("\n");
            sb.Append("  Longtitude: ").Append(Longtitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Location)obj);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="other">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PointId == other.PointId ||
                    PointId != null &&
                    PointId.Equals(other.PointId)
                ) && 
                (
                    Longtitude == other.Longtitude ||
                    
                    Longtitude.Equals(other.Longtitude)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Course == other.Course ||
                    Course != null &&
                    Course.Equals(other.Course)
                ) && 
                (
                    Speed == other.Speed ||
                    Speed != null &&
                    Speed.Equals(other.Speed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PointId != null)
                    hashCode = hashCode * 59 + PointId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longtitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    if (Course != null)
                    hashCode = hashCode * 59 + Course.GetHashCode();
                    if (Speed != null)
                    hashCode = hashCode * 59 + Speed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Location left, Location right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Location left, Location right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
