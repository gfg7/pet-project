/*
 * API MVP Карты
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Map.Service.Attributes;
using Map.Service.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace Map.Service.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class HubApiController : ControllerBase
    {
        /// <summary>
        /// Feature Удалить заметку
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="noteId"></param>
        /// <response code="200">Заметка удалена</response>
        /// <response code="404">Заметка не найдена</response>
        [HttpDelete]
        [Route("/location/note")]
        [ValidateModelState]
        [SwaggerOperation("LocationNoteDelete")]
        public virtual Task<IActionResult> LocationNoteDelete([FromQuery(Name = "noteId")][Required()] int noteId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            return Task.FromResult<IActionResult>(Ok());
        }

        /// <summary>
        /// Feature Заметка на карте (получение всех заметок карты в ближайшем диапазоне)
        /// </summary>
        /// <remarks>consumed event</remarks>
        /// <param name="radius">Радиус поиска в метрах</param>
        /// <response code="200">Массив заметок в ближайшем диапазоне</response>
        [HttpGet]
        [Route("/location/note")]
        [ValidateModelState]
        [SwaggerOperation("LocationNoteGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MapNote>), description: "Массив заметок в ближайшем диапазоне")]
        public virtual Task<IActionResult> LocationNoteGet([FromQuery(Name = "radius")][Required()] int radius)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MapNote>));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"noteId\" : 0,\r\n  \"location\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"message\" : \"message\",\r\n  \"timeout\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}, {\r\n  \"noteId\" : 0,\r\n  \"location\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"message\" : \"message\",\r\n  \"timeout\" : \"2000-01-23T04:56:07.000+00:00\"\r\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<MapNote>>(exampleJson)
            : default(List<MapNote>);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Feature Заметка на карте (оставить заметку)
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="mapNote"></param>
        /// <response code="201">Заметка сохранена</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        [HttpPost]
        [Route("/location/note")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationNotePost")]
        [SwaggerResponse(statusCode: 201, type: typeof(MapNote), description: "Заметка сохранена")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        public virtual Task<IActionResult> LocationNotePost([FromBody] MapNote mapNote)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(MapNote));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\r\n  \"noteId\" : 0,\r\n  \"location\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"message\" : \"message\",\r\n  \"timeout\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MapNote>(exampleJson)
            : default(MapNote);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Modal Отредактировать заметку
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="mapNote"></param>
        /// <response code="200">Заметка обновлена</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        /// <response code="404">Заметка не найдена</response>
        /// <response code="409">Ошибка сохранения заметки</response>
        [HttpPut]
        [Route("/location/note")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationNotePut")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка сохранения заметки")]
        public virtual Task<IActionResult> LocationNotePut([FromBody] MapNote mapNote)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorMessage));

            return Task.FromResult<IActionResult>(Ok());
        }

        /// <summary>
        /// MVP Геймификация Feature Трекер маршрутов
        /// </summary>
        /// <remarks>Текущее местоположение во время прогулки (income event)</remarks>
        /// <param name="location"></param>
        /// <response code="201">Текущие координаты сохранены</response>
        /// <response code="409">Ошибка сохранения</response>
        /// <response code="400">Ошибка валидации тела запроса</response>
        [HttpPost]
        [Route("/location")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationPost")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка сохранения")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Ошибка валидации тела запроса")]
        public virtual Task<IActionResult> LocationPost([FromBody] Location location)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorMessage));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));

            return Task.FromResult<IActionResult>(Created("uri", location));
        }

        /// <summary>
        /// Feature Статус показа местоположения
        /// </summary>
        /// <remarks>income event</remarks>
        /// <param name="body"></param>
        /// <response code="200">Успешно изменен статус показа</response>
        /// <response code="409">Ошибка изменения статуса показа</response>
        [HttpPut]
        [Route("/location")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("LocationPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserLocation), description: "Успешно изменен статус показа")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorMessage), description: "Ошибка изменения статуса показа")]
        public virtual Task<IActionResult> LocationPut([FromBody] bool? body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserLocation));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\r\n  \"lastLocation\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"noteId\" : 0,\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"userId\" : 6,\r\n  \"isHidden\" : true\r\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserLocation>(exampleJson)
            : default(UserLocation);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Modal Радар
        /// </summary>
        /// <remarks>consumed event</remarks>
        /// <response code="200">Массив пользователей рядом</response>
        [HttpGet]
        [Route("/location/radar")]
        [ValidateModelState]
        [SwaggerOperation("LocationRadarGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserLocation>), description: "Массив пользователей рядом")]
        public virtual Task<IActionResult> LocationRadarGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserLocation>));
            string exampleJson = null;
            exampleJson = "[ {\r\n  \"lastLocation\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"noteId\" : 0,\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"userId\" : 6,\r\n  \"isHidden\" : true\r\n}, {\r\n  \"lastLocation\" : {\r\n    \"routeId\" : 1,\r\n    \"latitude\" : 5.637376656633329,\r\n    \"longtitude\" : 5.962133916683182,\r\n    \"course\" : 2.3021358869347655,\r\n    \"speed\" : 7.061401241503109\r\n  },\r\n  \"noteId\" : 0,\r\n  \"time\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"userId\" : 6,\r\n  \"isHidden\" : true\r\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<UserLocation>>(exampleJson)
            : default(List<UserLocation>);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }
    }
}
